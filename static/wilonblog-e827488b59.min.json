[{"tag":"discuz","name":"文件、方法位置","language":"php","des":"source\\module\\portal\\portal_view.php    // 文章详情页方法\ntemplate\\xxx\\portal\\view_xx.htm    // 文章详情页模板，根据设置有所不同\n"},{"tag":"discuz","name":"首页设置portal隐藏","language":"php","des":"// 1. 全局-域名设置-应用域名：\n//      默认：www.xxx.com\n// 2. 界面-导航设置-主导航：\n//      去掉内置首页，添加一个首页[链接为/]\n"},{"tag":"discuz","name":"只加载DB","language":"php","des":"define('IN_DISCUZ', true);\nrequire_once './source/function/function_core.php';\nrequire_once './source/class/discuz/discuz_database.php';\nrequire_once './config/config_global.php';\nclass DB extends discuz_database {}\n$driver = function_exists('mysql_connect') ? 'db_driver_mysql' : 'db_driver_mysqli';\nrequire_once \\\"./source/class/db/$driver.php\\\";\nDB::init($driver, $_config['db']);\n"},{"tag":"git","name":"修改提交信息","language":"bash","des":"git commit --amend\n"},{"tag":"git","name":"初始新仓库流程","language":"bash","des":"# 1. 新建项目\ngit clone https://github.com/wilon/wilon.github.io.git    # 代码copy进来，直接push\n# 2. 已有项目\ngit init\ngit remote add origin https://github.com/wilon/wilon.github.io.git\ngit pull\ngit merge origin/master\ngit push --set-upstream origin master\n"},{"tag":"git","name":"分支","language":"shell","des":"# 本地分支操作\ngit branch    # 查看本地分支\ngit branch -r    # 查看远程分支\ngit branch -a    # 查看所有分支\ngit branch [name]     # 创建本地分支\ngit branch -d [name]     # 删除分支\ngit checkout [name]    # 切换分支\ngit checkout -b [name]    # 创建新分支并立即切换到新分支\ngit merge [name]     # 合并name分支到当前分支\n# 远程分支操作\ngit push origin [name]    # 创建远程分支(本地分支push到远程)\ngit push origin :heads/[name]    # 删除远程分支\ngit push origin test:master    # 提交本地test分支作为远程的master分支，远程的github就会自动创建一个test分支\ngit push origin test:test    # 提交本地test分支作为远程的test分支\ngit push origin :test    # 删除远程分支，刚提交到远程的test将被删除，但是本地还会保存的，不用担心\n# 修改默认HEAD指向分支\nvim .git/refs/remotes/origin/HEAD\n`ref: refs/remotes/origin/master`\n"},{"tag":"git","name":"远程仓库","language":"shell","des":"git clone git://github.com/jquery/jquery.git    # 检出仓库\ngit remote -v    # 查看远程仓库\ngit remote add [name] [url]    # 添加远程仓库\ngit remote rm [name]    # 删除远程仓库\ngit remote set-url --push[name][newUrl]    # 修改远程仓库\ngit pull [remoteName] [localBranchName]    # 拉取远程仓库\ngit push [remoteName] [localBranchName]    # 推送远程仓库\n"},{"tag":"git","name":"私钥与公钥","language":"shell","des":"TortoiseGit 使用 id_rsa\n1. 生成Putty key：puttygen工具，Conversions -> Import key -> Save private key；\n2. clone时使用\n"},{"tag":"git","name":"新模块工作流程","language":"shell","des":"# 主分支master下\ngit add mynewsfile/*    # 添加文件\ngit commit [-a] -m '说明'    # 提交到本地库，-a所有改动\ngit pull    # 从远程库拉取\ngit push [origin master]    # 提交到远程库，默认master\n"},{"tag":"git","name":"小改动工作流程","language":"shell","des":"# 主分支master下\ngit add file/*    # 添加文件\ngit commit [-a] -m '说明'    # 提交到本地库，-a所有改动\ngit pull    # 从远程库拉取\n# 解决冲突\ngit push [origin master]    # 提交到远程库，默认master\n"},{"tag":"git","name":"查看一些东西","language":"shell","des":"vim .git/config    # 查看项目皮配置\ngit status    # 项目目录里\ngit branch -a    # 查看所有分支，*代表本地\ngit diff 文件    # 当期文件修改\ngit log    # 查看提交日志\ngit log -p    # 查看提交日志，包含代码\ngit log --graph    # 以图表形式查看分支提交日志\ngit show    # 查看最近一次提交代码\ngit show commit_id   # 查看某一次提交代码\n"},{"tag":"git","name":"配置一些东西","language":"shell","des":"# 1. 命令配置\ngit config --global color.diff auto  && git config --global color.status auto && git config --global color.branch auto    # git配置颜色\ngit config --global alias.st status    # git配置别名\ngit config --global user.name wilon && git config --global user.email wilonx@163.com    # git配置用户名邮箱\n# 2. 修改配置文件 ~/.gitconfig，若修改部分则打开连接copy\nwget <a href=\"http://ocfxac0k9.bkt.clouddn.com/static/f/gitconfig.txt\" target=\"_blank\">http://ocfxac0k9.bkt.clouddn.com/static/f/gitconfig.txt</a> -O ~/.gitconfig\n"},{"tag":"git","name":"其他","language":"shell","des":"git clone https://github.com/Wilon/mynote.git    # 克隆一个项目\ngit reset --hard HEAD~1    # 回退所有内容到上N个版本，数字可变\n"},{"tag":"js","name":"正则表达式 RegExp","language":"javascript","des":"// 正则操作\nvar myReg = /a(b.)d/g    // g 全局搜索；i 不区分大小写搜索；m 多行搜索；\nvar myReg = new RegExp('/a(b.)d/', 'g');    // 好处是支持生成字符串正则\nvar resIsMatch = myReg.test('aabcdefg');    // true\nvar resArray = myReg.exec('aabcdefg');    // [\"abcd\", \"bc\"]\n// 字符串操作正则\nvar myStr = 'aabcdefg';\nvar resArray = myStr.match(myReg);    // [\"abcd\"]\nvar resNum = myStr.search(myReg);    // 1\nvar resStr = myStr.replace(myReg, 'zzz');    // \"azzzefg\"\nvar resArray = myStr.split(myReg);    // [\"a\", \"bc\", \"efg\"]\n"},{"tag":"js","name":"日期 new Date()","language":"javascript","des":"Date();    // \"Wed Nov 09 2016 10:44:34 GMT+0800 (CST)\"\nvar date = new Date();\n// get方法获取具体时间值；set方法设置是兼职；to方法格式化\ndate.getFullYear();    // 2016\ndate.toString();    // \"Wed Nov 09 2016 10:46:41 GMT+0800 (CST)\"\ndate.toLocaleString();    // \"2016/11/9 上午10:47:10\"\ndate.toLocaleDateString();    // \"2016/11/9\"\ndate.toLocaleTimeString();    // \"上午10:47:30\"\ndate.setFullYear(1947);\ndate.toString();    // \"Wed Nov 09 2016 10:46:41 GMT+0800 (CST)\"\n// 格式化函数\nDate.prototype.format = function(format) {\n    var o = {\n        \"M+\": this.getMonth() + 1,    //month\n        \"d+\": this.getDate(),    //day\n        \"h+\": this.getHours(),    //hour\n        \"m+\": this.getMinutes(),    //minute\n        \"s+\": this.getSeconds(),    //second\n        \"q+\": Math.floor((this.getMonth() + 3) / 3),    //quarter\n        \"S\": this.getMilliseconds()    //millisecond\n    }\n    if (/(y+)/.test(format)) {\n        format = format.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (var k in o) {\n        if (new RegExp(\"(\" + k + \")\").test(format)) {\n            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\"+ o[k]).substr((\"\" + o[k]).length));\n        }\n    }\n    return format;\n}\ndate.format('yyyy-MM-dd hh:mm:ss');    // \"2016-11-09 11:02:48\"\n"},{"tag":"js","name":"其他","language":"javascript","des":"// 模板字符串 -v >= ES6\nvar user = {name:'weilong', age:20},\n    num = 8;\nvar res = `My name is ${user.name}, age ${user.age + num}, num ${num}`;\n"},{"tag":"js","name":"其他","language":"javascript","des":"//检测URL\nString.prototype.checkeUrl = function () {\n    return new RegExp('^(https|http|ftp|rtsp|mms)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]', 'g').test(url);\n}\n"},{"tag":"js","name":"数组方法","language":"javascript","des":"varr colors = ['red', 'green', 'blue'];\nvar countColor = colors.length;\nvar colorsStr = colors.join(', ');    // 拼接数组\nvar countColor = colors.push('black');    // 栈：末尾推入一项\nvar endColor = colors.pop();    // 栈：去除末尾项\nvar startColor = colors.shift();    // 队列：去除首项\nvar countColor = colors.unshift('red');    // 队列：首部推入一项\nvar colors = colors.sort();    // 从小到大排序\nvar colors = colors.reverse();    // 从大到小排序\nvar colors = colors.sort(function (v1, v2) {\nif (v1.length > v2.length) {\n        return 1;    // 前面的长就交换\n    } else {\n        return -1;\n    }\n});    // 字符串由短到长排序\nvar colorsNew = colors.concat('yellow', ['brown', 'blue']);    // 数组拼接\nvar colorsNew1 = colors.slice(2);    // 返回去掉数2项后所有项的数组\nvar colorsNew2 = colors.slice(2, 4);    // 返回去掉第2-4项的数组\nvar removedColors = colors.splice(2);    // 返回去掉数2项后所有项的数组，colors为剩下值\nvar removedColors1 = colors.splice(2, 4);    // 返回去掉第2项后数4项的数组，colors为剩下值\nvar removedColors2 = colors.splice(2, 4, 'white');    // 返回去掉第2项后数4项的数组，colors为剩下值，第2项+white\nvar removedColors2 = colors.splice(2, 0, 'white');    // 返回去掉第2项后共0项的数组，colors为剩下值，第2项+white\nvar index = colors.indexOf('red');    // red位置\nvar index1 = colors.lastIndexOf('red');    // red最后出现的位置\nvar index2 = colors.indexOf('red', 'black');    // red位置为-1后数black位置\nvar everyIsRed = colors.every(function (item, index, array) {\n    return item == 'red';\n});   // 每一项都为red则返回true\nvar someIsRed = colors.some(function (item, index, array) {\n    return item == 'red';\n});   // 有一项为red则返回true\nvar mapRes = colors.map(function (item, index, array) {\n    return item.toLocaleUpperCase();\n});   // 每一项做操作，返回操作后数组\nvar joinRes = colors.reduce(function (prev, cur, index, array) {\n    return prev + index + ',' + cur;    // index为cur键\n});   // 并归对数组正序操作，返回操作后返回值\nvar joinRes = colors.reduceRight(function (prev, cur, index, array) {\n    return prev + index + ',' + cur;    // prev为上次返回值\n});   // 并归对数组反序操作，返回操作后返回值\n"},{"tag":"linux","name":"定时任务crontab","language":"shell","des":"# 安装配置\nyum -y install vixie-cron    # 软件包是cron的主程序；\nyum -y install crontabs    # 软件包是用来安装、卸装、或列举用来驱动cron守护进程的表格的程序。\nservice crond start    # 启动服务\nchkconfig --level 345 crond on    # 配置开机启动\nvim  /etc/crontab    # 配置文件\n# 定时任务： 分　时　日　月　周　 命令\n30 21 * * * /usr/local/etc/rc.d/lighttpd restart    # 每晚的21:30重启apache。\n45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart    # 每月1、10、22日的4 : 45重启apache。\n10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart    # 每周六、周日的1 : 10重启apache。\n0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart    # 在每天18 : 00至23 : 00之间每隔30分钟重启apache。\n0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart    # 每星期六的11 : 00 pm重启apache。\n* */1 * * * /usr/local/etc/rc.d/lighttpd restart    # 每一小时重启apache\n* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart    # 晚上11点到早上7点之间，每隔一小时重启apache\n0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart    # 每月的4号与每周一到周三的11点重启apache\n0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart    # 一月一号的4点重启apache\n*/30 * * * * /usr/sbin/ntpdate 210.72.145.44    # 每半小时同步一下时间\n"},{"tag":"linux","name":"zsh + oh-my-zsh","language":"shell","des":"yum install zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\nchsh -s /bin/zsh    # 修改默认zsh，需重启\n"},{"tag":"linux","name":"重启","language":"shell","des":"# 重启电脑\nshutdown -h|-r now    # 安全关机|重启，now可以更改为时间\nreboot    # 重启\n# 重启\\服务：\n/usr/local/apache2/bin/apachectl stop\n/usr/local/apache2/bin/apachectl start\n/etc/rc.d/init.d/nginx restart\nservice nginxd reload\n"},{"tag":"linux","name":"service能识别的目录！直接service httpd start","language":"shell","des":"/etc/rc.d/init.d/\n"},{"tag":"linux","name":"时间及管理","language":"shell","des":"date    # 查看系统时间\ndate -s 20130220    # 设定日期\ndate -s 09:30:00    # 设定时间\n# 远程校准时间\nyum -y install ntpdate\nntpdate cn.pool.ntp.org\n"},{"tag":"linux","name":"php进程管理php-fpm","language":"shell","des":"# 1. 查看服务\nps aux | grep --color=auto php-fpm\n# 2. 修改执行php进程用户\nvim /etc/php-fpm.d/www.conf     # 修改 user group\n/etc/init.d/php-fpm restart    # 重启\nchown -R user:group /var/lib/php/session    # 修改需要权限的文件夹\n"},{"tag":"linux","name":"常见目录信息","language":"shell","des":"/           # 根目录\n/bin        # 命令保存目录（普通用户就可以读取的命令）\n/boot       # 启动目录，启动相关文件\n/dev        # 设备文件保存目录\n/etc        # 配置文件保存目录\n/home       # 普通用户的家目录\n/lib        # 系统库保存目录\n/mnt        # 系统挂载目录\n/media      # 挂载目录\n/root       # 超级用户的家目录\n/tmp        # 临时目录\n/sbin       # 命令保存目录（超级用户才能使用的目录）\n/proc       # 直接写入内存的\n/sys\n/usr                # 系统软件资源目录\n/usr/bin/           # 系统命令（普通用户）\n/usr/sbin/          # 系统命令（超级用户）\n/var                # 系统相关文档内容（系统可变数据保存目录）\n/var/log/           # 系统日志位置\n/var/spool/mail/    # 系统默认邮箱位置\n/var/lib/mysql/     # 默认安装的mysql的库文件目录\n"},{"tag":"linux","name":"查看系统信息","language":"shell","des":"netstat -apn | grep 80    # 查看80端口被哪些进程占用\nps aux[|grep nginx]    # 查看当前系统所有运行的进程\nuname -a    # 内核版本\ncat /etc/issue    # 系统信息\ncat /proc/version    # 系统详情\n"},{"tag":"linux","name":"查看文件信息","language":"shell","des":"df -h    # 查看磁盘空间\ndu -sh *    # 查看当前目录下个文件（夹）大小\nls -l |grep \"^-\"|wc -l    # 查看当前文件夹下文件的个数\nls -lR|grep \"^-\"|wc -l    # 查看某目录下文件的个数，包括子目录里的。\nls -lR|grep \"^d\"|wc -l    # 查看某文件夹下目录的个数，包括子目录里的。\n"},{"tag":"linux","name":"composer安装","language":"shell","des":"curl -sS https://getcomposer.org/installer | php    # 下载源码包php执行\nmv composer.phar /usr/local/bin/composer    # 加入到系统命令\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com    # 全局配置国内镜像源\n composer config -l -g    # 查看全局配置信息\n"},{"tag":"linux","name":"安装php扩展extension","language":"shell","des":"# pear 命令安装\npear install xdebug    # 失败则扩展pear已不维护\n# 源码安装\ncd /xxx/php-包/ext/EXTENSION\nphpize    # 确认命令可使用\n./configure -with-php-config=/usr/local/php/bin/php-config\nmake && make install\necho extension=EXTENSION.so >> /usr/local/php/etc/php.ini\n"},{"tag":"linux","name":"更换阿里云yum源","language":"shell","des":"mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup    # 备份\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo    # 下载相应的yum源\nyum clean all    # 运行yum\nyum makecache    # makecache生成缓存\n"},{"tag":"linux","name":"xshell连接服务器","language":"shell","des":"# 倒计时界面enter安装，一直下一步\nchkconfig iptables off    # 开机关闭iptables\nservice iptables stop    # 立即关闭iptables\n# 设置网络连接为【NAT】\nservice sshd start    # 开启ssh\n"},{"tag":"linux","name":"开机启动","language":"shell","des":"vim /etc/inittab    # :id:5:initdefault: 启动级别，5图形界面改，3纯命令行\nchkconfig 服务名 on    # 设置开机启动，off关闭\nchkconfig --list    # 查看自启动列表、级别\nntsysv    # 伪图形界面启动服务\n"},{"tag":"linux","name":"一些脚本","language":"shell","des":"wget http://ocfxac0k9.bkt.clouddn.com/static/f/vpn_centos6.sh && sh vpn_centos6.sh # 搭建vpn\nwget http://ocfxac0k9.bkt.clouddn.com/static/f/vim_php.sh && sh vim_php.sh # vim无插件补全\n"},{"tag":"linux","name":"用户相关","language":"shell","des":"# 用户操作\nsu weilong    # 切换用户\nsudo -i    # 切换到root\nuseradd -G {group-name} weilong    # 新建用户[到组]\n# 密码操作\npasswd weilong    # 修改用户密码\nuserdel [-r|f] weilong    # 删除用户[及目录|强制删除]\nvim /etc/passwd[group|shadow]    # 查看所有用户[组|密码]信息\n# 组操作\ngpasswd -a [-d] 用户名 组名    # 把用户加入[删除]到组\nusermod -a -G groupA user    # 将用户添加到组groupA中，而不必离开其他用户组\n# 给用户添加sudo，需root操作\nchmod 600 /etc/sudoers\necho 'weilong ALL=(ALL) ALL' >> /etc/sudoers\nchmod 400 /etc/sudoers    # 收起写权限\n# 禁止用户登陆\nusermod -L weilong    # Lock 帐号weilong\nusermod -U weilong    # Unlock 帐号weilong\n# ssh秘钥登陆服务端配置：/etc/ssh/sshd_config\nRSAAuthentication yes    # 使用RSA认证\nPubkeyAuthentication yes    # 允许Pubkey Key\nAuthorizedKeysFile .ssh/authorized_keys    # id_rsa.pub放入【该用户】下此文件\nPasswordAuthentication no    # 不允许密码登陆\nPermitEmptyPasswords no    # 不允许无密码登陆\nPermitRootLogin no   # 不允许root直接登陆\n# sftp登陆服务器\nSubsystem sftp internal-sftp    # sftp配置\nX11Forwarding no\nAllowTcpForwarding no\nMatch user[Group] weilong    # 配置用户[组]——start\nForceCommand internal-sftp\nChrootDirectory /home    # 所属用户必须为root——end\n"},{"tag":"linux","name":"文件上传rz下载sz","language":"shell","des":"yum -y install lrzsz\n"},{"tag":"linux","name":"scp文件传输","language":"shell","des":"cp LOCAL_FILE REMOTE_USERNAME@REMOTE_IP:REMOTE_FOLDER\n"},{"tag":"linux","name":"命令重命名，创建快捷命令","language":"shell","des":"echo alias ws=\\\\'cd /home/wwwroot/default/\\\\' >> ~/.bashrc && source ~/.bashrc\n"},{"tag":"linux","name":"目录文件查找字符串grep","language":"shell","des":"grep [-acinv] [--color=auto] 'string/preg' FILENAME/FILEDIR\n-a # 将 binary 文件以 text 文件的方式搜寻数据\n-c # 计算找到 '搜寻字符串' 的次数\n-i # 忽略大小写的不同，所以大小写视为相同\n-n # 顺便输出行号\n-v # 反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n--color=auto # 可以将找到的关键词部分加上颜色的显示喔！\n"},{"tag":"linux","name":"终端快捷操作","language":"shell","des":"ctrl+a 跳转至行首，ctrl+e 跳转至行尾\nctrl+k 快清至行首，ctrl+u 快清至行尾\nctrl+w 清除当前光标位置之前的一个单词\nctrl+c 强制终止，ctrl+l 清屏\ncmd !! 双惊叹号表示上一行命令\n!cmd   执行最近的已cmd开头的命令\n"},{"tag":"linux","name":"查看文件","language":"shell","des":"tail -f FILENAME    # 动态查看文件最新变化\ncat [-n] 文件名    # 所有内容[显示行号]\nmore 文件名    # 分屏显示，space|b|q 翻页下|上|退出\nhead [-n 2] 文件名    # 显示文件头[两行]\n"},{"tag":"php","name":"记住一些常量","language":"php","des":"file_put_contents(dirname(__FILE__) . '/params.log', json_encode($data), FILE_APPEND);\n"},{"tag":"php","name":"5.4 run tool","language":"php","des":"<iframe src=\"http://www.shucunwang.com/RunCode/php7/\" style=\"width: 100%; height: 100%;\" frameborder=\"0\"></iframe>\n"},{"tag":"php","name":"比较好的密码存储处理","language":"php","des":"// sha1/md5都行\n$salt = sha1(uniqid(mt_rand(), true));\n$pwdDb = sha1($salt . sha1($pwdUser) . KEY);\n"},{"tag":"php","name":"比较好的密码存储处理","language":"php","des":"// 创建新的空对象\n$var1 = new stdClass();\n$var2 = (object)[];\n$var3 = json_decode('{}');\n"},{"tag":"php","name":"静态方法中只能操作静态属性","language":"php","des":"// 静态方法中只能操作静态属性\nstatic function p(){\n    echo self::$country;\n    // echo $this->name;  ×\n}\n"},{"tag":"php","name":"一行代码实现两个值交换，不引入第三个变量","language":"php","des":"$a = 3;\n$b = 4;\nlist($b, $a) = array($a, $b);\n$a = $a + $b && $b = $a - $b && $a = $a - $b;\n$a = $a ^ $b && $b = $b ^ $a && $a = $a ^ $b;\n"},{"tag":"php","name":"得到多维数组所有key","language":"php","des":"function array_all_keys($array) {\n    foreach ($array as $k => $v) {\n        $keys[] = $k;\n        if (is_array($v)) $keys = array_merge($keys, array_all_keys($v));\n    }\n    return $keys;\n}\n"},{"tag":"php","name":"数组按内部值重新排序","language":"php","des":"// usort更新索引为0123，uasort为保持索引\n$arr['a'] = ['name' => 'weilong', 'num' => 3, 'volume' => 98];\n$arr['b'] = ['name' => 'weimong', 'num' => 2, 'volume' => 88];\n$arr['c'] = ['name' => 'weicong', 'num' => 1, 'volume' => 77];\nuasort($arr, function($a, $b) {\n    if ($a['num'] == $b['num']) return 0;\n    return ($a['num'] > $b['num']) ? 1 : -1;\n});\n"},{"tag":"php","name":"printf sprintf 高级用法","language":"php","des":"printf(\"%b\", 250);    //将250转成二进制： 11111010\nprintf(\"%o\", 250);    //将250转成八进制： 0372\nprintf(\"%x\", 250);    //将250转成十六进制： 0xfa\nsprintf(\"%04d\", 13);    // 补全4位：0013\n"},{"tag":"php","name":"编码问题","language":"php","des":"/**\n *|————————————————————————————————————————————————————————————|\n *|            |   a     |        王伟龙                        |\n *| ASCII      |   97    | 231 142 139 228 188 159 233 190 153 |\n *| Unicode    | \\\\u0061 | \\\\u738b\\\\u4f1f\\\\u9f99               |\n *| UrlEncode  |   a     | %e7%8e%8b%e4%bc%9f%e9%be%99         |\n *|————————————————————————————————————————————————————————————|\n */\n// 函数\nstring chr ( int $ascii )    // 返回相对应于 ASCII 所指定的单个字符\nint ord ( string $string )   // 返回第一个字符的ASCII码值\n"},{"tag":"php","name":"比较有用的命令","language":"shell","des":"php -i | grep -i xxxx  // 查看xxxx信息\nphp -i | grep -i php.ini  // 查看php.ini信息\nphp -i | grep -i extension  // 查看php扩展信息\n"},{"tag":"php","name":"cURL基本使用","language":"php","des":"$url  = 'http://baidu.com';\n$post_data = array('user' => 'weilong');\n$headers = array(\n        'Content-type: text/xml;charset=\\\"utf-8\\\"',\n        'Accept: text/xml',\n    );\n$ch = curl_init();    // 初始化\ncurl_setopt($ch, CURLOPT_URL, $url);    // url地址\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    // http请求头\ncurl_setopt($ch, CURLOPT_HEADER, 0);    // 是否显示头信息\ncurl_setopt($ch, CURLOPT_TIMEOUT, 1);    // 最长秒数\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    // 是否获取文本，不获取文本则以文件流形式输出\ncurl_setopt($ch, CURLOPT_POST, 1);    // 数据发送方式post\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);    // post数据\n$response = curl_exec($ch);    // 获取文本为1则得到字串\ncurl_close($ch);    // 关闭\n"},{"tag":"php","name":"Windows安装php扩展","language":"php","des":"1. 查看phpinfo —— PHP Version、Architecture、PHP Extension Build\n2. 根据(1)的信息下载dll：http://pecl.php.net 搜索 <a target='_blank' href='http://pecl.php.net'>打开链接</a>\n3. dll放入 php\\\\ext\\\\ ，php.ini 添加 extension=php_xxx.dll\n"},{"tag":"php","name":"html字符串处理","language":"php","des":"/**\n* html字符串处理\n*|————————————————————————————————————|\n*|字符 |  描述   | html实体 |         |\n*|     |  空格   |  &amp;nbsp;  |         |\n*|  <  |  小于号 |  &amp;lt;    | special |\n*|  >  |  大于号 |  &amp;gt;    | special |\n*|  &  |  和号   |  &amp;amp;   | special |\n*|  \\\"  |  引号   |  &amp;quot;  | special |\n*|  '  |  撇号   |  &amp;apos;  | special |\n*|  ￠ |  分     |  &amp;cent;  |         |\n*|  £  |  镑     |  &amp;pound; |         |\n*|  ¥  |  日圆   |  &amp;yen;   |         |\n*|  € |  欧元   |  &amp;euro;  |         |\n*|  § |  小节   |  &amp;sect;  |         |\n*|  ©  |  版权   |  &amp;copy;  |         |\n*|  ®  |  商标   |  &amp;reg;   |         |\n*|  ™  |  商标   |  &amp;trade; |         |\n*|  × |  乘号   |  &amp;times; |         |\n*|  ÷ |  除号   |  &amp;divide;|         |\n*|————————————————————————————————————|\n*/\n$str1 = html_entity_decode($str);       // html实体 --> 字符\n$str2 = htmlentities($str);             // 字符 --> html实体\n$str3 = htmlspecialchars_decode($str);  // special html实体 --> 字符\n$str4 = htmlspecialchars($str);         // special 字符 --> html实体\n"},{"tag":"php","name":"编码问题","language":"php","des":"// 1. PHP文件的编码格式， gbk->utf-8\n$content = iconv('GBK', 'UTF-8', $content);     // 推荐\n$content = mb_convert_encoding($content, 'UTF-8','GBK');\n$data = eval('return ' . iconv('GBK', 'UTF-8', var_export($data, true)) . ';');    // 数组\n2. PHP文件中：header('Content-type:text/html;Charset=utf-8');\n3. 浏览器的查看编码\n4. &lt;meta charset='utf-8'/&gt\n5. mysql_set_charset('utf8');\n6. mysql> set names utf8;\n"},{"tag":"php","name":"PHP语言结构，非函数，比函数快","language":"php","des":"echo print die isset unset include require array list empty\n// 注意，include_once()是函数; 注意，require_once()是函数;\n"},{"tag":"php","name":"empty与isset","language":"php","des":"empty($a['a']);  // 若$a['a']所等于的值是0或null,则为真！\nisset($b['b']);  // 若$b['b']存在'b'这个键，则为真！\n"},{"tag":"php","name":"版本需要注意的","language":"php","des":"$a = $b ?: $c;    // php-v >= 5.3\n$arr = [];    // php-v >= 5.4\nfunction writeFileLog($file, ...$params) {}    // 动态参数 php-v >= 5.6\n// 正则修饰符e，自 PHP 5.5.0 起废弃。改用 preg_replace_callback\nnamespace Foo\\Bar\\somenamespace;    // php-v >= 5.3\n// php匿名函数 php-v >= 5.3\n"},{"tag":"php","name":"文件上传后print_r($_FILES);","language":"php","des":"Array (\n    [pic] => Array (     //picname为前端表单name:&lt;input type=\\\"file\\\" name=\\\"pic\\\"/&gt;\n        [name] => iphone5.jpg\n        [type] => image/jpeg\n        [tmp_name] => C:\\\\Windows\\\\Temp\\\\phpA6ED.tmp\n        [error] => 0\n        [size] => 89470\n    )\n)\n"},{"tag":"php","name":"面试必知必会","language":"php","des":"· redis、memcached区别\n· cookie、session区别\n· 手写冒泡排序、快速排序\n· 手写单例模式、工厂模式\n"},{"tag":"preg","name":"TIPS","language":"php","des":"注意重复加双杠 (\\\\d)\\\\\\\\1\n"},{"tag":"preg","name":"模式修整符","language":"php","des":"i 表示不区分大小写\ns 表示匹配视为单行（就是可以让点.能支持换行）\nU 表示拒绝贪婪匹配（与?有冲突）\n"},{"tag":"preg","name":"正则?与U会都是拒绝贪婪，且冲突","language":"php","des":"echo $str = '000abcd333abcd444abscd888';\n$res1 = preg_replace('/ab(.*)d/iU', '123', $str);\n$res2 = preg_replace('/ab(.*?)d/iU', '123', $str);    // 有？恢复贪婪\npreg_match_all('/ab(.*?)d/i', $str, $res3);    // ?与U只能有一个\npreg_match_all('/ab(.*?)d/iU', $str, $res4);\n"},{"tag":"software","name":"Lantern 更新 Host-Switch-Plus 代理","language":"shell","des":"Chrome 打开 Lantern 主页\n看[审查元素]：主页的 Remote Address 端口\n修改代理设置：PROXY 127.0.0.1:端口; DIRECT\n"},{"tag":"software","name":"MacOS brew 安装PHP环境","language":"shell","des":"brew update    # 获取最新版brew\nbrew search php\nbrew install php56    # 安装\nbrew remove mysql56 --force    # （强制）卸载\nbrew upgrade nginx    # 更新\nbrew options php56                 #查看php5.6安装选项\nbrew info    php56                 #查看php5.6相关信息\nbrew home    php56                 #访问php5.6官方网站\nbrew services list                 #查看系统通过 brew 安装的服务\nbrew services cleanup              #清除已卸载无用的启动配置文件\nbrew services restart php56        #重启php-fpm\n"},{"tag":"software","name":"MacOS 修改软件快捷键","language":"shell","des":"键盘 -> 应用快捷键 -> +\n菜单标题：应用程序菜单上文字\n"},{"tag":"software","name":"VMware 设置某虚拟机开机启动","language":"shell","des":"\\\"VMware安装目录\\\\vmrun\\\" start \\\"虚拟机文件目录\\\\xxxx.vmx\\\" nogui > vmrun.cmd\n将vmrun.cmd放入开机启动目录startup\\\\\n"},{"tag":"software","name":"Win 命令提示行美化","language":"shell","des":"1. 属性 -> 字体大小调为36\n"},{"tag":"software","name":"SQLyog","language":"shell","des":"1. 永久试用：HKEY_CURRENT_USER\\\\SOFTWARE 对应的权限锁死；\n2. 字体改为Consolas,14px；\n"},{"tag":"software","name":"Atom 更换 npm 源","language":"shell","des":"~/.atom/.apmrc 文件添加一行： registry = https://registry.npm.taobao.org\n"},{"tag":"software","name":"Atom 必备插件","language":"shell","des":"activate-power-mode  # 敲代码动态炫效果 —— SETTING: 屏幕关，按键关；CONTROL: ActivatePowerPode-Toggle\npigments  # 文件颜色即时显示\nminimap # 代码缩略图\n"},{"tag":"svn","name":"服务端新建项目、配置用户","language":"shell","des":"# 配置项目\nsvnadmin create /home/svn/newproject    # 新建项目newproject\nvim /home/svn/newproject/config/svnserve.conf\n    anon-access = read\n    auth-access = write\n    # 默认为/home/svn/newproject/config下，可定义\n    authz-db = authz    # 权限管理文件\n    password-db = passwd    # 用户名密码文件\n# 配置权限组\nvim /home/svn/newproject/config/authz\n    [groups]    # 分组\n    developer = weilong\n    [/]    # 分组权限\n    @developer = rw\n# 配置用户=密码\nvim /home/svn/newproject/config/passwd\n    [users]\n    weilong = 123456\n"},{"tag":"svn","name":"提交代码","language":"shell","des":"svn status    # 查看状态\nsvn add    # 添加文件\nsvn commit -m '说明'    # 向上提交\n"},{"tag":"svn","name":"查看一些信息","language":"shell","des":"svn log    # 查看提交日志\nsvn log -r 95    # 查看某次提交日志\nsvn log -l 2    # 查看最近2次提交日志\nsvn info [/project/path]    # 查看项目信息\n"},{"tag":"svn","name":"操作文件","language":"shell","des":"svn　revert　[--recursive]　文件名    # 恢复文件为最新版\nsvn propset svn:ignore 'vendor'    # 忽略，加入到ignore\n"},{"tag":"svn","name":"版本管理","language":"shell","des":"svn merge -r 28:25 something    # 回滚到版本号\n"},{"tag":"vim","name":"多行添加、删除注释","language":"shell","des":"# 添加\nctrl+v j    #　选中多行\nＩ    # 插入模式，进行输入\nesc    # 多行起作用\n# 删除\nctrl+v j    #　选中多行\nd [x]    # 删除模式\n"},{"tag":"vim","name":"配置安装.vimrc","language":"shell","des":"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\nwget http://wilon.github.io/static/vimrc.txt -O ~/.vimrc\nvim +PluginInstall +qall\n"},{"tag":"vim","name":"浏览文件netrw","language":"shell","des":"<cr>    # netrw 进入目录或读入文件 |netrw-cr|\ni    # 在瘦、长、宽和树形的各种列表方式间切换 |netrw-i|\nt    # 在新标签页里打开光标所在的文件/目录 |netrw-t|\n"},{"tag":"vim","name":"基本的设置","language":"shell","des":":set encoding=utf-8     # 更改编码\n:set nu!        # 显示行号\n:set wrap       # 自动换行\n:set no|nc      # 忽略大小写，[no]ignorecase，\n# 如果只是想在搜索或者替换的时候偶尔忽略大小写，而不更改全局变量，加 \\c即可： /nancy\\c\n"},{"tag":"vim","name":"单字母动作","language":"shell","des":"ma    # 设定标记a\n`a    # 跳到标记a\n``    # 跳转前的位置\n`[    # 最后修改的位置的开头\n`]    # 最后修改的位置的结尾\n:delmarks a    # 删除标签a；\n:delmarks!    # 删除所有标签，不包括[A-Z]和[0-9]标签。\n"},{"tag":"vim","name":"单字母动作","language":"shell","des":"c 删除后插入动作；d 删除动作；y 复制动作；v 选择动作；\nr 单字母替换动作；m 标记动作；z 折叠动作；p 粘贴动作\ni 光标前；I 行首；a 光标后；A行尾；C 删除至行尾\no 光标下一行；O 光标上一行；s 删光标后一个字符；S 清除全行\n"},{"tag":"vim","name":"移动move","language":"shell","des":"[num] t [character]    # 匹配到单个字符光标前；f光标后\n[num] w|b    # 上[下]N个单词\n/string    # 匹配到string（不包含）\nH|M|L    # 匹配到窗口的顶部、中间、和底部\n[num](    # 匹配到句首  )句尾 {段首 }段尾 ]]下一个方法名 [[上一个方法名\n"},{"tag":"vim","name":"括号匹配bracket","language":"shell","des":"ci{    # 删除{}内容，为插入模式\ndi]    # 删除[]内容\ndi(    # 删除()内容\nyi'    # 复制''内容\nvi\"    # 选中\"\"内容\n"},{"tag":"vim","name":"删除和替换","language":"shell","des":"[num]dd    # 向下删除[num]1行\n:g[v]/INSERT.*99cms_news\\c/d    # 删除包含[不包含]字串‘INSERT.*99cms_news\\c’的行  \\c忽略大小写\n:n,$s/vivian/sky/g    # 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky\n:%s/,/\\r/g\n"},{"tag":"vim","name":"标签页功能","language":"shell","des":":tabe /file    # 新标签打开文件，不输入file则打开空标签\ngt    # 切换到下一个标签\ngT    # 切换到上一个标签\n:tabfir    # 切换到第一个标签\n:tabl    # 切换到最后一个标签\nNgt    # 切换到N号标签\n"},{"tag":"vim","name":"剪切板-寄存器","language":"shell","des":":di    # 查看所有寄存器信息\n\"Ny    # 将匹配内容放入N号寄存器\n\"Np    # 粘贴N号寄存器信息\n"},{"tag":"vim","name":"切换文件","language":"shell","des":"ctrl+o    # 上一个编辑位置\nctrl+i    # 下一个编辑位置\nctrl+w gf    # 新标签打开光标所在文件\n:marks    # 可以查看有哪些标记文件\n'N    # 打开N号标记文件\n:ls    # 查看缓冲区文件，同buffers、files\n:bn    # 打开n号缓冲区文件\n"}]